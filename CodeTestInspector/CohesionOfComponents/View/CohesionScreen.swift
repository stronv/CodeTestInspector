//
//  CohesionScreen.swift
//  CodeTestInspector
//
//  Created by Artyom Tabachenko on 04.06.2025.
//

import Foundation
import SwiftUI

import SwiftUI

struct CohesionScreen: View {
    @ObservedObject var viewModel: CohesionViewModel

    var body: some View {
        VStack(alignment: .leading) {
            // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
            HStack {
                Button("–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç") {
                    let panel = NSOpenPanel()
                    panel.canChooseDirectories = true
                    panel.canChooseFiles = false
                    panel.begin { resp in
                        guard resp == .OK, let url = panel.url else { return }
                        viewModel.computeCohesion(for: url)
                    }
                }
                .buttonStyle(.bordered)

                if let data = viewModel.cohesionData {
                    Text("–ù–∞–π–¥–µ–Ω—ã \(data.largeSCCs.count) –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(—ã)")
                        .foregroundColor(.secondary)
                        .padding(.leading, 8)
                }
            }
            .padding(.vertical, 10)

            Divider()

            // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if viewModel.cohesionData == nil {
                VStack {
                    Spacer()
                    Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–Ω–æ—Å—Ç–∏.")
                        .foregroundColor(.secondary)
                        .italic()
                    Spacer()
                }
            } else {
                // –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî —Å–º–æ—Ç—Ä–∏–º largeSCCs
                if let data = viewModel.cohesionData {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π ¬´–±–æ–ª—å—à–æ–π¬ª (size>1) SCC, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º¬ª
                    if data.largeSCCs.isEmpty {
                        VStack {
                            Spacer()
                            Text("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ ‚Äî —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç.")
                                .foregroundColor(.green)
                                .italic()
                            Spacer()
                        }
                    } else {
                        // –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                        List {
                            Section(header: Text("–°–∏–ª—å–Ω–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (size > 1)")) {
                                ForEach(Array(data.largeSCCs.enumerated()), id: \.offset) { idx, component in
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ #\(idx + 1) (—Ä–∞–∑–º–µ—Ä \(component.count)):")
                                            .font(.headline)
                                        ForEach(component, id: \.self) { node in
                                            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã C: –∏ M: –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
                                            if node.hasPrefix("C:") {
                                                Text("‚Ä¢ –ö–ª–∞—Å—Å: \(node.dropFirst(2))")
                                                    .font(.caption)
                                            } else if node.hasPrefix("M:") {
                                                Text("‚Ä¢ –ú–µ—Ç–æ–¥: \(node.dropFirst(2))")
                                                    .font(.caption)
                                            } else {
                                                Text("‚Ä¢ \(node)")
                                                    .font(.caption)
                                            }
                                        }
                                    }
                                    .padding(.vertical, 4)
                                }
                            }

                            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äì –≤—ã–≤–æ–¥–∏–º –∏—Ö —Ç–æ–∂–µ
                            if !data.suggestions.isEmpty {
                                Section(header: Text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")) {
                                    ForEach(Array(data.suggestions.enumerated()), id: \.offset) { idx, sug in
                                        VStack(alignment: .leading, spacing: 2) {
                                            Text("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #\(idx + 1):")
                                                .bold()
                                            Text(sug.message)
                                                .font(.body)
                                        }
                                        .padding(.vertical, 4)
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Spacer()
        }
        .padding(20)
        .frame(minWidth: 800, minHeight: 500)
    }
}
