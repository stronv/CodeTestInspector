//
//  CohesionScreen.swift
//  CodeTestInspector
//
//  Created by Artyom Tabachenko on 04.06.2025.
//

import Foundation
import SwiftUI

struct CohesionScreen: View {
    @ObservedObject var viewModel: CohesionViewModel

    var body: some View {
        VStack(alignment: .leading) {
            HStack {
                Button("–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç") {
                    let panel = NSOpenPanel()
                    panel.canChooseDirectories = true
                    panel.canChooseFiles = false
                    panel.begin { resp in
                        guard resp == .OK, let url = panel.url else { return }
                        viewModel.computeCohesion(for: url)
                    }
                }
                .buttonStyle(.bordered)

                if let data = viewModel.cohesionData {
                    Text("–ù–∞–π–¥–µ–Ω–æ \(data.largeSCCs.count) –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç(—ã). –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ \(data.refactoringPlans.count) –ø–ª–∞–Ω(–æ–≤) —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞.")
                        .foregroundColor(.secondary)
                        .padding(.leading, 8)
                }
            }
            .padding(.vertical, 10)

            Divider()

            if viewModel.cohesionData == nil {
                VStack {
                    Spacer()
                    Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–Ω–æ—Å—Ç–∏.")
                        .foregroundColor(.secondary)
                        .italic()
                    Spacer()
                }
            } else if let data = viewModel.cohesionData {
                if data.largeSCCs.isEmpty && data.refactoringPlans.isEmpty {
                    VStack {
                        Spacer()
                        Text("–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ ‚Äî —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç. –ü–ª–∞–Ω–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç.")
                            .foregroundColor(.green)
                            .italic()
                        Spacer()
                    }
                } else {
                    ScrollView {
                        VStack(alignment: .leading, spacing: 16) {
                            // –°–µ–∫—Ü–∏—è —Å–∏–ª—å–Ω–æ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                            if !data.largeSCCs.isEmpty {
                                Text("–°–∏–ª—å–Ω–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (size > 1)")
                                    .font(.headline)
                                ForEach(Array(data.largeSCCs.enumerated()), id: \.offset) { idx, component in
                                    VStack(alignment: .leading, spacing: 4) {
                                        Text("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ #\(idx + 1) (—Ä–∞–∑–º–µ—Ä \(component.count)):")
                                            .font(.subheadline).bold()
                                        ForEach(component, id: \.self) { node in
                                            if node.hasPrefix("C:") {
                                                Text("‚Ä¢ –ö–ª–∞—Å—Å: \(node.dropFirst(2))")
                                                    .font(.caption)
                                            } else if node.hasPrefix("M:") {
                                                Text("‚Ä¢ –ú–µ—Ç–æ–¥: \(node.dropFirst(2))")
                                                    .font(.caption)
                                            } else {
                                                Text("‚Ä¢ \(node)")
                                                    .font(.caption)
                                            }
                                        }
                                    }
                                    .padding(.vertical, 4)
                                }
                            }

                            // –°–µ–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                            if !data.suggestions.isEmpty {
                                Text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                                    .font(.headline)
                                ForEach(Array(data.suggestions.enumerated()), id: \.offset) { idx, sug in
                                    VStack(alignment: .leading, spacing: 2) {
                                        Text("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #\(idx + 1):")
                                            .font(.subheadline).bold()
                                        Text(sug.message)
                                            .font(.body)
                                    }
                                    .padding(.vertical, 4)
                                }
                            }

                            // –°–µ–∫—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
                            if !data.refactoringPlans.isEmpty {
                                Text("–ü–ª–∞–Ω—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
                                    .font(.headline)
                                let plansArray = data.refactoringPlans.sorted(by: { $0.key < $1.key })
                                ForEach(plansArray, id: \.key) { sccIdentifier, plan in
                                    VStack(alignment: .leading, spacing: 4) {
                                        if case .extractProtocol = plan.type, let details = plan.protocolDetails {
                                            Text("üõ†Ô∏è –ò–∑–≤–ª–µ—á—å –ø—Ä–æ—Ç–æ–∫–æ–ª '\(details.name)'")
                                                .font(.subheadline).bold()
                                            Text("   ‚Ä¢ –ò–∑ –∫–ª–∞—Å—Å–∞: \(details.sourceClassName)")
                                            Text("   ‚Ä¢ –î–ª—è –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–ª–∞—Å—Å–∞: \(details.dependentClassName)")
                                            Text("   ‚Ä¢ SCC: \(sccIdentifier)")
                                                .font(.caption)
                                                .foregroundColor(.gray)

                                            Button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å (preview –∏–∑–º–µ–Ω–µ–Ω–∏–π)") {
                                                viewModel.applyRefactoringPlan(plan)
                                            }
                                            .padding(.top, 5)
                                        } else {
                                            Text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
                                        }
                                    }
                                    .padding(.vertical, 6)
                                }
                            }

                            if !viewModel.codeDiffs.isEmpty {
                                Divider().padding(.vertical, 8)
                                Text("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
                                    .font(.headline)

                                ForEach(viewModel.codeDiffs, id: \.filePath) { section in
                                    Text(section.filePath)
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                        .padding(.top, 4)

                                    DiffView(diffLines: section.lines)
                                        .frame(maxHeight: 200)
                                }

                                Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è") {
                                    viewModel.saveRefactoringChanges()
                                }
                                .buttonStyle(.borderedProminent)
                                .padding(.top, 8)
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }

            Spacer()
        }
        .padding(20)
        .frame(minWidth: 800, minHeight: 600)
    }
}
