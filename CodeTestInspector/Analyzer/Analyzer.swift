//
//  Analyzer.swift
//  CodeTestInspector
//
//  Created by Artyom Tabachenko on 20.04.2025.
//

import Foundation

struct Analyzer {
    static func analyze(projectPath: String) -> String {
        var result = ""

        let fm = FileManager.default
        guard let enumerator = fm.enumerator(atPath: projectPath) else {
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."
        }

        for case let file as String in enumerator {
            if file.hasSuffix(".swift") {
                let fullPath = (projectPath as NSString).appendingPathComponent(file)
                do {
                    let code = try String(contentsOfFile: fullPath)
                    result += analyzeFile(filename: file, content: code) + "\n"
                } catch {
                    result += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ \(file)\n"
                }
            }
        }

        return result.isEmpty ? "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." : result
    }

    static func analyzeFile(filename: String, content: String) -> String {
        // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if content.contains("Singleton") {
            return "üö® \(filename): –ù–∞–π–¥–µ–Ω Singleton ‚Äî –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é."
        } else {
            return "‚úÖ \(filename): OK"
        }
    }
}
