//
//  MetricsScreen.swift
//  CodeTestInspector
//
//  Created by Artyom Tabachenko on 01.06.2025.
//

import Foundation
import SwiftUI

import SwiftUI

struct MetricsScreen: View {
    @ObservedObject var viewModel: MetricsViewModel

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            // 1) –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
            HStack {
                Button("–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç") {
                    let panel = NSOpenPanel()
                    panel.canChooseDirectories = true
                    panel.canChooseFiles = false
                    panel.begin { resp in
                        guard resp == .OK, let url = panel.url else { return }
                        viewModel.selectedPath = url
                    }
                }
                .buttonStyle(.bordered)

                if let path = viewModel.selectedPath {
                    Text(path.path)
                        .font(.caption)
                        .foregroundColor(.gray)
                        .lineLimit(1)
                        .truncationMode(.middle)
                        .padding(.leading, 4)
                }
            }

            // 2) –ö–Ω–æ–ø–∫–∞ ¬´Compute Metrics¬ª
            Button {
                viewModel.computeMetrics()
            } label: {
                HStack {
                    Image(systemName: "chart.bar.fill")
                    Text("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
                }
            }
            .buttonStyle(.borderedProminent)
            .disabled(viewModel.selectedPath == nil)

            // 3) –ï—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
            if !viewModel.didCompute {
                Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏¬ª")
                    .foregroundColor(.secondary)
                    .italic()
                    .padding(.top, 8)
            }

            // 4) –ü–æ—Å–ª–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            if viewModel.didCompute {
                Divider().padding(.vertical, 8)

                VStack(alignment: .leading, spacing: 8) {
                    // 4.1) Cyclomatic Complexity
                    HStack {
                        Text("üè∑Ô∏è Cyclomatic Complexity:")
                            .bold()
                        Spacer()
                        Text("\(viewModel.metricsResult.totalCyclomatic)")
                            .foregroundColor(
                                viewModel.isCyclomaticOutOfBounds ? .red : .primary
                            )
                    }

                    // 4.2) Maintainability Index
                    HStack {
                        Text("üìä Maintainability Index:")
                            .bold()
                        Spacer()
                        Text(String(format: "%.1f", viewModel.metricsResult.maintainabilityIndex))
                            .foregroundColor(
                                viewModel.isMaintainabilityOutOfBounds ? .red : .primary
                            )
                    }

                    // 4.3) Fan-Out Similarity
                    HStack {
                        Text("üåê Fan-Out Similarity:")
                            .bold()
                        Spacer()
                        Text(String(format: "%.2f", viewModel.metricsResult.fanOutSimilarity))
                            .foregroundColor(
                                viewModel.isFanOutOutOfBounds ? .red : .primary
                            )
                    }

                    // 4.4) Dependency Depth
                    HStack {
                        Text("üìà Dependency Depth:")
                            .bold()
                        Spacer()
                        Text("\(viewModel.metricsResult.dependencyDepth)")
                            .foregroundColor(
                                viewModel.isDepthOutOfBounds ? .red : .primary
                            )
                    }

                    // 4.5) Coupling
                    HStack {
                        Text("üîó Coupling:")
                            .bold()
                        Spacer()
                        Text("\(viewModel.metricsResult.coupling)")
                            .foregroundColor(
                                viewModel.isCouplingOutOfBounds ? .red : .primary
                            )
                    }
                }
            }

            Spacer()
        }
        .padding(20)
        .frame(minWidth: 800, minHeight: 500)
    }
}
